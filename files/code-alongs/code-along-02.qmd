---
title: "Code-along 02"
author: "Your Name Goes Here"
editor: visual
execute:
  error: true
format: pdf # or replace 'pdf' with 'typst'
---

# Setup

## Packages

Install the
[`summarytools`](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html)
package, available on CRAN. Copy and paste the following code into your
Console pane. Then hit enter.

`install.packages("summarytools")`

Load the standard packages and our new package `summarytools()`.

```{r}
#| message: false
#| label: load

library(here)
library(tidyverse) 
library(haven) # not core tidyverse
library(gssr)
library(gssrdoc)
library(summarytools)
```

## Load your data & codebook

```{r}
#| message: false
#| label: gssdata

# Get the data only for the 2024 survey respondents
gss24 <- gss_get_yr(2024)

# Load the codebook
data(gss_dict)

```

# Coding Basics

You can use R to do basic math calculations

```{r}
#| label: arithmetic 

1 + 2
2 * 5
(1 + 2) / 2
```

You can create new objects with the assignment operator \<-

```{r}
#| label: assign 

x <- 3 * 4
x
```

You can (and should) make comments in your code

```{r}
#| label: comments 

# R will ignore any text after # for that line

primes <- c(2, 3, 5, 7, 11, 13) # create vector of prime numbers
primes

```

Object names must start with a letter and can only contain letters,
numbers, \_, and .

```         
i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

**Demo:**

```{r}
#| label: basics

a <- 7 
b <- 3 
addition <- a + b 
subtraction <- a - b 
multiplication <- a * b 
division <- a / b 
exponentiation <- a^2
```

```{r}
#| label: basics-results

a  
b 
addition 
subtraction 
multiplication 
division 
exponentiation 
```

## Operators in R

[Operators in R](https://www.geeksforgeeks.org/r-language/r-operators/)
are symbols directing R to perform various kinds of mathematical,
logical, and decision operations.

## Comparison operators

```{r}
#| label: compare

x <- 5 
y <- 3 
equal <- x == y 
not_equal <- x != y 
less_than <- x < y 
more_than <- x > y 
less_than_or_equal_to <- x <= y 
more_than_or_equal_to <- x >= y
```

```{r}
#| label: compare-output

x 
y  
equal 
not_equal 
less_than 
more_than 
less_than_or_equal_to 
more_than_or_equal_to 
```

## Logical operators

```{r}
#| label: logical

x <- TRUE 
y <- FALSE 

and_operator <- x & y 
or_operator <- x | y 
not_operator <- !x
```

```{r}
#| label: logical-output

and_operator 
or_operator
not_operator
```

## Assignment operators

Make a tiny data frame and save it.

```{r}
#| label: tibble

df <- tibble(x = c(1, 2, 3, 4, 5), y = c("a", "a", "b", "c", "c"))
df
```

# Variable Types

## Data types in R

A property is assigned to objects that determines how generic functions
operate with it.

**logical** - Boolean values `TRUE` and `FALSE`

```{r}
class(TRUE)
```

**character** - character strings

```{r}
class("Sociology")
```

**Integer** - numeric data without decimals\
(indicated with an `L`).

```{r}
class(2L)
```

**numeric** - default type if values are numbers or if the values
contain decimals.

```{r}
class(2.5)
```

**factors** consist of character data with a fixed and known set of
possible values

```{r}
#| label: factors01

opinion <- factor(c("like", "dislike", "dislike", "hate", "dislike", "hate"))
class(opinion)

# By default, the levels are sorted alphabetically. 
levels(opinion) 

```

```{r}
#| label: factors02

# Reorder the levels with the argument `levels` in the `factor()` function
opinion <- factor(opinion, levels = c("hate", "dislike", "like")) 
levels(opinion)
```

```{r}
#| label: factors03

# If the order has meaning (like rankings), you can make it an ordered factor
opinion <- factor(opinion, levels = c("hate", "dislike", "like"), ordered = TRUE) 
levels(opinion)
```

## Converting between types

Use a function: `as.logical()`, `as.numeric()`, `as.integer()`, or
`as.character()`.

Create a numeric variable.

```{r}
#| label: convert_01

x <- 1:3
x
class(x)
```

Change it to a character variable.

```{r}
#| label: convert_02

y <- as.character(x)
y
class(y)
```

## Haven labelled

When you import data into R from software like SPSS, Stata, or SAS, you
might notice a special class called `haven_labelled`.

```{r}
#| label: labelled

class(gss24$premarsx)
table(gss24$premarsx)
```

It makes data easier to understand without needing a separate codebook.

```{r}
#| label: value_labels

attr(gss24$premarsx, "label") 
print_labels(gss24$premarsx) 

```

You can use
[`as_factor`](https://haven.tidyverse.org/reference/as_factor.html) to
see the value labels of the variable `premarsx`.

```{r}
#| label: label02_premarsx
table(as_factor(gss24$premarsx), useNA = "ifany")

```

## Convert labels to factors

1.  Get rid of all the 'missing' (NA) levels using `zap_missing`

```{r}
#| label: label03_premarsx

gss24$premarsx <- zap_missing(gss24$premarsx) 
table(as_factor(gss24$premarsx), useNA = "ifany")
```

2.  Apply the labels instead of numeric values using `as_factor`

```{r}
#| label: label04_premarsx

gss24$premarsx <- as_factor(gss24$premarsx) # replace the values with labels
table(gss24$premarsx, useNA = "ifany") # notice we didn't need to wrap the variable in as_factor
```

3.  Get rid of the empty levels in `premarsx` using `droplevels`

```{r}
#| label: label05_premarsx

gss24$premarsx <- droplevels(gss24$premarsx)
table(gss24$premarsx)
```

Now do the same for the `sex` variable.

```{r}
#| label: labels_sex

gss24$sex <- zap_missing(gss24$sex) 
gss24$sex <- as_factor(gss24$sex) 
gss24$sex <- droplevels(gss24$sex)

table(gss24$sex)
```

# Look at variables

Make a frequency table of the variable `sex`. Then, do the same for
`premarsx`.

```{r}
#| label: freq01

freq(gss24$sex) 
freq(gss24$premarsx) 

```

Using `report.nas = FALSE` suppresses the missing data.\
The `headings = FALSE` parameter suppresses the heading section. Do the
same for `premarsx`.

```{r}
#| label: freq02

freq(gss24$sex, report.nas = FALSE, headings = FALSE) 
freq(gss24$premarsx, report.nas = FALSE, headings = FALSE) 
```

## Cross-tabs

We've been using the `table()` function with one variable at a time, but
it also let's you create a frequency table (**crosstab**) with two
variables.

```{r}
#| label: crosstab01

# 1st variable is the rows, 2nd variable is the columns.
table(gss24$premarsx, gss24$sex)

```

To run `freq()` by group, pair it with the `stby()` function.

```{r}
#| label: crosstab02

stby(gss24$premarsx, gss24$sex, freq)
```

Use `summarytools::ctable` instead!

```{r}
#| label: crosstab03
#| code-line-numbers: "1|2|3|4"
#| output-location: fragment

ctable(gss24$premarsx, gss24$sex, # <1>
       prop = "c", # <2>
       format = "p", # <3>
       useNA = "no")  # <4>
```

## Check your knowledge

Based on your table:

-   ***\[your answer here\]*** percentage of respondents believe sex
    before marriage is 'almost always wrong'?

-   A greater percentage of ***\[men or women\]*** think sex before
    marriage is 'not wrong at all'.
